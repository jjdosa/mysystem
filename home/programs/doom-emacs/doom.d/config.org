* Name and Address

#+begin_src emacs-lisp

(setq user-full-name "JJ Kim"
      user-mail-address "jj@haedosa.xyz")

#+end_src

* theme

#+begin_src emacs-lisp

(setq doom-theme 'doom-one)

#+end_src

* Hangul

#+begin_src emacs-lisp

(setq default-input-method "korean-hangul3f")

#+end_src

* Org

#+begin_src emacs-lisp

(setq org-directory "~/Org/")

#+end_src

* Display Line Number

#+begin_src emacs-lisp

(setq display-line-numbers-type t)

#+end_src

* Envrc

#+begin_src emacs-lisp

(use-package! envrc
  :hook (after-init . envrc-global-mode))

#+end_src

* Which-key

#+begin_src emacs-lisp

(setq which-key-idle-delay 0.1)

#+end_src

* lsp
** lsp

#+begin_src emacs-lisp

(use-package! lsp-mode
  :custom
  (lsp-completion-enable-additional-text-edit nil)
  :hook (lsp-mode . (lambda ()
     (lsp-ui-mode)
     (lsp-ui-doc-mode)
   ))
)


#+end_src

** lsp-ui

#+begin_src emacs-lisp

(use-package! lsp-ui)

#+end_src

** Lsp-ui-doc

#+begin_src emacs-lisp

(setq lsp-ui-doc-position 'top)

(defun my/cycle-lsp-ui-doc-position ()
  (interactive)
  (setq lsp-ui-doc-position
     (let ((x lsp-ui-doc-position))
        (cond ((eq x 'top) 'bottom)
              ((eq x 'bottom) 'at-point)
              ((eq x 'at-point) 'top))))
)

#+end_src

** lsp-haskell

#+begin_src emacs-lisp

(use-package! lsp-haskell
  :hook ((haskell-mode . lsp-deferred)
         (haskell-mode . (lambda () (lsp-ui-mode)
                                    (lsp-ui-doc-mode)))))

#+end_src

* Dired
** Dired-hide-dotfiles

#+begin_src emacs-lisp

(use-package! dired-hide-dotfiles
  :after dired
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
    (map! (:map dired-mode-map
           :n "H" #'dired-hide-dotfiles-mode)))

#+end_src

** Dired-ranger

#+begin_src emacs-lisp

(use-package! dired-ranger
  :after dired
  :bind (:map dired-mode-map
          ("C-c b" . dired-ranger-bookmark)
          ("C-c v" . dired-ranger-bookmark-visit)
          ("C-c p" . dired-ranger-paste)
          ("C-c y" . dired-ranger-copy)
          ("C-c x" . dired-ranger-move))
)
#+end_src

** All-the-icons-dired

#+begin_src emacs-lisp

(use-package! all-the-icons-dired
  :after all-the-icons dired
  :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

* Company

#+begin_src emacs-lisp

(map! :map company-active-map
      "TAB"        #'company-select-common-or-cycle
      "<tab>"      #'company-select-common-or-cycle
      "RET"        nil
      "<return>"   nil
      "S-RET"      #'company-complete
      "<S-return>" #'company-complete
)

#+end_src

* Counsel-rg

#+begin_src emacs-lisp

(map! :leader "r" #'counsel-rg)

#+end_src
* Evil
** Evil-little-word

#+begin_src emacs-lisp

(use-package! evil-little-word
  :after evil
  :config
  (general-define-key
    :keymaps '(insert normal visual motion operater)
    "C-j" 'evil-forward-little-word-begin
    "C-l" 'evil-forward-little-word-end
    "C-k" 'evil-backward-little-word-begin
    "C-h" 'evil-backward-little-word-end
  )
  (general-define-key
     :keymaps 'evil-inner-text-objects-map
    "C-j" '(evil-inner-little-word :wk "little-word")
    "C-l" '(evil-inner-little-word :wk "little-word")
  )
  (general-define-key
     :keymaps 'evil-outer-text-objects-map
    "C-j" '(evil-a-little-word :wk "little-word")
    "C-l" '(evil-a-little-word :wk "little-word")
  )
)

#+end_src

** Evil-textobj-between

#+begin_src emacs-lisp

(use-package! evil-textobj-between
  :after evil
)

#+end_src

* Whitespace

#+begin_src emacs-lisp
(use-package! whitespace
  :custom (whitespace-style '(face tabs trailing
                              space-before-tab
                              newline empty
                              space-after-tab))
  :hook (((prog-mode org-mode) . whitespace-mode)
         (before-save . delete-trailing-whitespace))
)
#+end_src

* Undo-tree

#+begin_src emacs-lisp

(use-package! undo-tree
  :hook (((prog-mode org-mode) . undo-tree-mode))
)

#+end_src

* Windsize

#+begin_src emacs-lisp

(use-package! windsize
  :custom
  (windsize-cols 1)
  (windsize-rows 1)
  :commands windsize-left windsize-right
            windsize-up windsize-down
)

(map!
  "C-S-h" #'windsize-left
  "C-S-l" #'windsize-right
  "C-S-k" #'windsize-up
  "C-S-j" #'windsize-down
)

#+end_src
